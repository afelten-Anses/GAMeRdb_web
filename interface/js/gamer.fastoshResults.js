const url = window.location.href;
const uuid = url.split("=").pop();
let reloads = "" // used for page refresh using setTimeout and clearTimeout
console.log(uuid);
let currentDate = new Date(Date.now()).toLocaleString();

// reload pages every x seconds
function startPageReload(seconds) {
    reloads = setTimeout(function(){ location.reload(1); }, seconds*1000);
}
// stop reloading pages
function stopPageReload() {
    reloads = clearTimeout(reloads);
}

$(document).ready(function() {
    $.get( "../tmp/fastosh_" + uuid + "/taxonomy.nwk", function( data,err ) {
        const dataNewick = data;
        const dataObject = dataNewick;
        phylocanvas = new Smits.PhyloCanvas(
            dataObject,
            'svgCanvas',
            1000,
            1000,
            'circular'
        );
       phylocanvasRect = new Smits.PhyloCanvas(
            dataObject,
            'svgCanvasRect',
            1000,
            900,
            'rectangular'
        );
        
        // Adapt svg div heigth to newick length
        
        let dataNewickLen = dataNewick.length; // newick length
        let strainsCount = $('tspan').length; // number of strains contained in the svg generated from the nwk file
        if (dataNewickLen > 750 && dataNewick.length <= 8000) {
            if(strainsCount * 9.5 >= 900) {
                $('svg').height(strainsCount * 9.5);
            }
        }  else if (dataNewickLen > 8000 && dataNewick.length <= 20000) {
            $('svg').height($('tspan').length * 5.05);
        } else {
            if(strainsCount * 9.5 >= 900) {
                $('svg').height($('tspan').length * 4);
            }
        } 
        // stop reloading page if startPageReload was called in a previous Jquery GET error.
        stopPageReload()
    }).fail(function() {
        console.warn("Fasthosh always in progress, or errored");
        $('#datatables_header span').html('FasTosh - Results </br><font size="3" font color="grey"> <i class="exclamation circle icon"></i>Always in progress, you may used a big dataset. Page will be refreshed every 10 seconds. If you finally don\'t obtain any results, please contact us. </font>');
        startPageReload(10)
    });
    $('a[href="distance_matrix"]').attr('href',"../tmp/fastosh_" + uuid + "/distance_matrix.tsv")
    $('a[href="newick"]').attr('href',"../tmp/fastosh_" + uuid + "/taxonomy.nwk")
    
});



$("#helpme").click(function()
{
    $('.longer.modal').modal({
    inverted: false
  }).modal('show');
});

// Animation when switching from circular to rectangular tree
$("#switchtree").on("click", function() {
    $('#switchtree').attr('class',"ui loading button");
    $('#svgCanvas').transition({animation : 'fly right', duration  : 800});
    sleep(800).then ( () =>  {
        $('#svgCanvasRect').transition({animation : 'fly left', duration  : 800});
        sleep(800).then ( () =>  {
            $('#switchtree').hide();
            $('#switchtreeRect').show();
            $('#switchtree').attr('class',"ui labeled icon button");
        });
    });
    
});
// Animation when switching from rectangular to circular tree
$("#switchtreeRect").on("click", function() {
    $('#switchtreeRect').attr('class',"ui loading button");
    $('#svgCanvasRect').transition({animation : 'fly right', duration  : 800});
    sleep(800).then ( () => {
        $('#svgCanvas').transition({animation : 'fly left', duration  : 800});
         sleep(800).then ( () =>  {
             $('#switchtreeRect').hide();
             $('#switchtree').show();
             $('#switchtreeRect').attr('class',"ui labeled icon button");
         });
    });
    
});

// Download image action : archive (client-side) and cirular tree svg images and save it as zip file.
$("#dlimage").on("click", function() {
var zip = new JSZip();
// Add a top-level, arbitrary text file with contents
zip.file("Readme.txt", "------------------------------------------------------\n" + 
         "Generated by GAMeRdbi at : " + currentDate +
        ".\n------------------------------------------------------\n" +
         "\nIf you dont have a sofware for viewing SVG files, you can still open it in your web browser.");
// Generate a directory within the Zip file structure
var allfiles = zip.folder();
/* To retrieve svg image we use didnt use the native JSphylo method
phylocanvas.getSvgSource() because it seems buggy when used for more than 1 tree */ 
allfiles.file("Rectangular_Tree.svg", $('#svgCanvasRect')[0].outerHTML); 
allfiles.file("Circular_tree.svg", $('#svgCanvas')[0].outerHTML);
console.log("generatesync")
// Asynchronously generates zip file (containing the 2 trees) with JSZip.
        allfiles.generateAsync({
            type: "blob",
            compression: "DEFLATE",
            streamFiles:true,
            compressionOptions: {
                level: 9 // Level 1 to 9. 0: best speed, 9: best compression
            }
        }).then(function(blob) {
            // Launch download dialog
            saveAs(blob, "FasTosh_results.zip");
        });
});

// Download all action : archive (client-side) all results and save them as zip file.
$("#dlall").on("click", function() {
var zip = new JSZip();
// Add a top-level, arbitrary text file with contents
zip.file("Readme.txt", "------------------------------------------------------\n" + 
         "Generated by GAMeRdbi at : " + currentDate +
        ".\n------------------------------------------------------\n" +
         "\nIf you dont have a sofware for viewing SVG files, you can still open it in your web browser.");
// Generate a directory within the Zip file structure
var allfiles = zip.folder();
/* To retrieve svg image we use didnt use the native JSphylo method
phylocanvas.getSvgSource() because it seems buggy when used for more than 1 tree */ 
allfiles.file("Rectangular_Tree.svg", $('#svgCanvasRect')[0].outerHTML); 
allfiles.file("Circular_tree.svg", $('#svgCanvas')[0].outerHTML);
let distMatrix=$.get({
    url: "../tmp/fastosh_" + uuid + "/distance_matrix.tsv",
    async:false
});
allfiles.file("distance_matrix.tsv", distMatrix); 
let newick=$.get({
    url: "../tmp/fastosh_" + uuid + "/taxonomy.nwk",
    async:false
});
allfiles.file("taxonomy.nwk", newick); 
console.log("generatesync")
// Asynchronously generates zip file (containing the 2 trees) with JSZip.
        allfiles.generateAsync({
            type: "blob",
            compression: "DEFLATE",
            streamFiles:true,
            compressionOptions: {
                level: 9 // Level 1 to 9. 0: best speed, 9: best compression
            }
        }).then(function(blob) {
            // Launch download dialog
            saveAs(blob, "FasTosh_results_all.zip");
        });
});

